// Copyright 2020 Fuji-Iot authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "fuji_ac_protocol_handler.h"
#include "gtest/gtest.h"

namespace fuji_iot
{
    // Those tests were created using original wired-controller connected to
    // AC unit and capturing communication on the wire. AC unit state modification was done
    // with IR controller and then with wired-controller.
    class FujiAcProtocolHandlerTest : public testing::Test
    {
    protected:
        void ExpectResponse(std::array<uint8_t, 8> mf, std::array<uint8_t, 8> resp)
        {
            auto r = handler_->HandleMasterFrame(FujiMasterFrame(mf));
            EXPECT_EQ(r.has_value(), true);
            EXPECT_EQ(r.value().BuildFrame(), resp);
        }

        void ExpectNull(std::array<uint8_t, 8> mf)
        {
            auto r = handler_->HandleMasterFrame(FujiMasterFrame(mf));
            EXPECT_EQ(r.has_value(), false);
        }

        void SetUp() override
        {
            state_ = new FujiAcState();
            handler_ = std::unique_ptr<FujiAcProtocolHandler>(new FujiAcProtocolHandler(std::unique_ptr<FujiAcState>(state_)));
        }

        std::unique_ptr<FujiAcProtocolHandler> handler_;
        FujiAcState *state_;
    };

    // This communication was captured immediately after power-on (by circuit breaker) of the AC Unit.
    // It excercises login sequence.
    TEST_F(FujiAcProtocolHandlerTest, Startup)
    {
        ExpectNull({0x00, 0x81, 0x00, 0x46, 0x12, 0xa0, 0x00, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x12, 0xa0, 0x00, 0x20}, {0x20, 0x81, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00});
        ExpectResponse({0x00, 0xa0, 0x20, 0x1f, 0x1f, 0x05, 0x01, 0x00}, {0x20, 0xa1, 0x00, 0x46, 0x12, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x46, 0x12, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x46, 0x12, 0x00, 0x2f, 0x00});
    }

    // This communication was captured after controller was already registered, but was temporarily disconnected and connected
    // to main unit again.
    TEST_F(FujiAcProtocolHandlerTest, TestReconnect)
    {
        ExpectNull({0x00, 0x81, 0x00, 0x46, 0x12, 0xa0, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00});
        ExpectResponse({0x00, 0xa0, 0x20, 0x1f, 0x1f, 0x05, 0x01, 0x00}, {0x20, 0xa1, 0x00, 0x46, 0x12, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x46, 0x12, 0x00, 0x2f, 0x00});
    }

    // This communication was captured when AC unit was turned on with a remote (IR) controller.
    TEST_F(FujiAcProtocolHandlerTest, RemoteTurnOnTurnOff)
    {
        handler_->login_read_ = false;
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x46, 0x12, 0x00, 0x2f, 0x00});
        EXPECT_EQ(false, state_->Enabled());
        EXPECT_EQ(18, state_->Temperature());
        ExpectNull({0x00, 0x80, 0x00, 0x47, 0x16, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x47, 0x16, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x47, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x47, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x47, 0x16, 0x00, 0x2f, 0x00});
        EXPECT_EQ(true, state_->Enabled());
        EXPECT_EQ(22, state_->Temperature());
        ExpectNull({0x00, 0x80, 0x00, 0x46, 0x16, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x16, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x46, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x46, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x46, 0x16, 0x00, 0x2f, 0x00});
        EXPECT_EQ(false, state_->Enabled());
    }

    // This communication was captured when AC unit state was modified in various ways using (IR) controller.
    TEST_F(FujiAcProtocolHandlerTest, TestGolden)
    {
        handler_->login_read_ = false;
        ExpectResponse({0x00, 0xa0, 0x00, 0x47, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x47, 0x16, 0x00, 0x2f, 0x00});
        // Set fan to high
        ExpectNull({0x00, 0x80, 0x00, 0x37, 0x16, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x37, 0x16, 0x40, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x37, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x37, 0x16, 0xa0, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x37, 0x16, 0x00, 0x2f, 0x00});
        EXPECT_EQ(fan_t::HIGH, state_->Fan());
        // Set fan to high
        ExpectNull({0x00, 0x80, 0x00, 0x27, 0x16, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x27, 0x16, 0x40, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x27, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x27, 0x16, 0xa0, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x27, 0x16, 0x00, 0x2f, 0x00});
        EXPECT_EQ(fan_t::MEDIUM, state_->Fan());
        // Set fan to low
        ExpectNull({0x00, 0x80, 0x00, 0x17, 0x16, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x17, 0x16, 0x40, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x17, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x17, 0x16, 0xa0, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x17, 0x16, 0x00, 0x2f, 0x00});
        EXPECT_EQ(fan_t::LOW, state_->Fan());
        // Set fan to auto
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x16, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x40, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20},
                       {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        EXPECT_EQ(fan_t::AUTO, state_->Fan());
        // Set temp to 18
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x12, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x12, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x12, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x12, 0x00, 0x2f, 0x00});
        EXPECT_EQ(18, state_->Temperature());
        // Set temp to 22
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x16, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        EXPECT_EQ(22, state_->Temperature());
        // Set temp to 25
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x19, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x19, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x19, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x19, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x19, 0x00, 0x2f, 0x00});
        EXPECT_EQ(25, state_->Temperature());
        // Set temp to 30
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(30, state_->Temperature());
        // Set mode to dry
        ExpectNull({0x00, 0x80, 0x00, 0x05, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x05, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x05, 0x1e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x05, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x05, 0x1e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(mode_t::DRY, state_->Mode());
        // Set mode to fan
        ExpectNull({0x00, 0x80, 0x00, 0x03, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x03, 0x00, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x03, 0x00, 0x00, 0x2f, 0x00});
        EXPECT_EQ(mode_t::FAN, state_->Mode());
        // Set mode to heat
        ExpectNull({0x00, 0x80, 0x00, 0x09, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x09, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x09, 0x1e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x09, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x09, 0x1e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(mode_t::HEAT, state_->Mode());
        // Set mode to auto
        ExpectNull({0x00, 0x80, 0x00, 0x0b, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x0b, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x0b, 0x1e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x0b, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x0b, 0x1e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(mode_t::AUTO, state_->Mode());
        // Set mode to cool
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(mode_t::COOL, state_->Mode());
        // Enable econ
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x9e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x9e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x9e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x9e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x9e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(true, state_->Economy());
        // Disable econ
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(false, state_->Economy());
        // Enable swing
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x1e, 0x44, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0x44, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x04, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0xa4, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x04, 0x2f, 0x00});
        EXPECT_EQ(true, state_->Swing());
        // Disable swing
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x1e, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x1e, 0x00, 0x2f, 0x00});
        EXPECT_EQ(false, state_->Swing());
        // Set temp to 23
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x17, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        EXPECT_EQ(23, state_->Temperature());
        // Single blow direction
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x17, 0x42, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        // Again
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x17, 0x42, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        // Again
        ExpectNull({0x00, 0x80, 0x00, 0x07, 0x17, 0x42, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        // Turning off
        ExpectNull({0x00, 0x80, 0x00, 0x06, 0x17, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x06, 0x17, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x06, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x06, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x06, 0x17, 0x00, 0x2f, 0x00});
        EXPECT_EQ(false, state_->Enabled());
    }

    // This communication was captured when AC unit was turned on using wired controller.
    TEST_F(FujiAcProtocolHandlerTest, TurnOn)
    {
        handler_->login_read_ = false;
        ExpectResponse({0x00, 0xa0, 0x00, 0x06, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x06, 0x17, 0x00, 0x2f, 0x00});
        state_->SetEnabled(true);
        ExpectResponse({0x00, 0xa0, 0x00, 0x06, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        EXPECT_EQ(true, state_->Enabled());
    }

    // This communication was captured when AC unit state was modified using wired controller.
    TEST_F(FujiAcProtocolHandlerTest, WiredControlGolden)
    {
        handler_->login_read_ = false;
        ExpectResponse({0x00, 0xa0, 0x00, 0x06, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x06, 0x17, 0x00, 0x2f, 0x00});
        state_->SetEnabled(true);

        ExpectResponse({0x00, 0xa0, 0x00, 0x06, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x17, 0x00, 0x2f, 0x00});
        // set temp 18
        state_->SetTemperature(18);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x17, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x12, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x12, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x12, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x12, 0x00, 0x2f, 0x00});
        // set temp 22
        state_->SetTemperature(22);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        // set fan max
        state_->SetFan(fan_t::MAX);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x47, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x47, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x47, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x47, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x47, 0x16, 0x00, 0x2f, 0x00});
        // set fan high
        state_->SetFan(fan_t::HIGH);
        ExpectResponse({0x00, 0xa0, 0x00, 0x47, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x37, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x37, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x37, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x37, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x37, 0x16, 0x00, 0x2f, 0x00});
        // set fan medium
        state_->SetFan(fan_t::MEDIUM);
        ExpectResponse({0x00, 0xa0, 0x00, 0x37, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x27, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x27, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x27, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x27, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x27, 0x16, 0x00, 0x2f, 0x00});
        // set fan low
        state_->SetFan(fan_t::LOW);
        ExpectResponse({0x00, 0xa0, 0x00, 0x27, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x17, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x17, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x17, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x17, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x17, 0x16, 0x00, 0x2f, 0x00});
        // set fan auto
        state_->SetFan(fan_t::AUTO);
        ExpectResponse({0x00, 0xa0, 0x00, 0x17, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        // set mode dry and temp to 26
        state_->SetMode(mode_t::DRY);
        state_->SetTemperature(26);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x05, 0x1a, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x05, 0x1a, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x05, 0x1a, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x05, 0x1a, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x05, 0x1a, 0x00, 0x2f, 0x00});
        // set mode heat and temp to 21
        state_->SetMode(mode_t::HEAT);
        state_->SetTemperature(21);
        ExpectResponse({0x00, 0xa0, 0x00, 0x05, 0x1a, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x09, 0x15, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x09, 0x15, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x09, 0x15, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x09, 0x15, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x09, 0x15, 0x00, 0x2f, 0x00});
        // set mode fan
        state_->SetMode(mode_t::FAN);
        ExpectResponse({0x00, 0xa0, 0x00, 0x09, 0x15, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x03, 0x00, 0x00, 0x2f, 0x00});
        ExpectNull({0x00, 0x80, 0x00, 0x03, 0x12, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x12, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x03, 0x00, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x03, 0x00, 0x00, 0x2f, 0x00});
        // set auto and temp to 24
        state_->SetMode(mode_t::AUTO);
        state_->SetTemperature(24);
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x0b, 0x18, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x0b, 0x18, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x0b, 0x18, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x0b, 0x18, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x0b, 0x18, 0x00, 0x2f, 0x00});
        // set mode fan
        state_->SetMode(mode_t::FAN);
        ExpectResponse({0x00, 0xa0, 0x00, 0x0b, 0x18, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x03, 0x00, 0x00, 0x2f, 0x00});
        ExpectNull({0x00, 0x80, 0x00, 0x03, 0x12, 0x40, 0x01, 0x20});
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x12, 0x40, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x03, 0x00, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x03, 0x00, 0x00, 0x2f, 0x00});
        // set mode cool
        state_->SetMode(mode_t::COOL);
        state_->SetTemperature(22);
        ExpectResponse({0x00, 0xa0, 0x00, 0x03, 0x12, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        // set economy on
        state_->SetEconomy(true);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x96, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x96, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x96, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x96, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x96, 0x00, 0x2f, 0x00});
        // set economy off
        state_->SetEconomy(false);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x96, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        // set swing on
        state_->SetSwing(true);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x04, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x04, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x04, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa4, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x04, 0x2f, 0x00});
        // set swing off
        state_->SetSwing(false);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa4, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        // swing step
        state_->SetSwingStep(true);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x02, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        // swing step
        state_->SetSwingStep(true);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x02, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        // set swing on
        state_->SetSwing(true);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x04, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x04, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x04, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa4, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x04, 0x2f, 0x00});
        // set swing off
        state_->SetSwing(false);
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa4, 0x01, 0x20}, {0x20, 0x81, 0x08, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0x00, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
        ExpectResponse({0x00, 0xa0, 0x00, 0x07, 0x16, 0xa0, 0x01, 0x20}, {0x20, 0x81, 0x00, 0x07, 0x16, 0x00, 0x2f, 0x00});
    }

} // namespace fuji_iot